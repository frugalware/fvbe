#!/bin/bash

set -e

## we check for porgs needed to build the ISO or needed in the ISO
FVBE_PROGS=(xorriso mksquashfs mktemp mformat grub-mkrescue chroot truncate mkfs.ext4 cp ln mkdir sed)

fvbe_check_root() {

	if [[ "$(id -u)" -ne 0 ]]; then
		fvbe_error_msg "You must be root to do this."
	fi
}

fvbe_plain_msg() {

	local a="$1"

	if [ "$FVBE_COLOR" == "Y" ] || [ "$FVBE_COLOR" == "y" ]; then
		/bin/echo -e "   \033[1;32m->\033[1;0m \033[1;1m${a}\033[1;0m" >&2
	else
		/bin/echo "   ->  ${a}" >&2
	fi
}

fvbe_info_msg() {

	local a="$1"

	if [ "$FVBE_COLOR" = "Y" ] || [ "$FVBE_COLOR" = "y" ]; then
		/bin/echo -e " \033[1;34m:: INFO ::\033[1;0m \033[1;1m${a}\033[1;0m" >&2
	else
		/bin/echo  " :: INFO :: ${a}" >&2
	fi
}

fvbe_warn_msg() {

	local a="$1"

	if [ "$FVBE_COLOR" = "Y" ] || [ "$FVBE_COLOR" = "y" ]; then
		/bin/echo -e " \033[1;33m:: WARNING ::\033[1;0m \033[1;1m${a}\033[1;0m" >&2
	else
		/bin/echo  " :: WARNING :: ${a}" >&2
	fi
}

fvbe_error_msg() {

	local a="$1"

	if [ "$FVBE_COLOR" = "Y" ] || [ "$FVBE_COLOR" = "y" ]; then
		/bin/echo -e " \033[1;31m:: ERROR ::\033[1;0m \033[1;1m${a}\033[1;0m" >&2
	else
		/bin/echo  " :: ERROR :: ${a}" >&2
	fi
	fvbe_die
}

fvbe_die() {

	fvbe_umount
	exit 1
}


_fvbe_check_prog() {

	local a="$1" b

	b=$(type -p ${a})

	if [[ ! -x ${b} ]]; then
		fvbe_error_msg "Could not find ${a}. Bailing out.."
	else
		fvbe_plain_msg "Found ${b}.. good"
	fi

}

fvbe_check_prog() {

	if [ "${#FVBE_PROGS[@]}" -gt 0 ]; then
		local prog
		fvbe_info_msg "Checking for needed progs.."
		for prog in "${FVBE_PROGS[@]}"; do
			_fvbe_check_prog ${prog}
		done
	else

		fvbe_info_msg "Don't have any programs to check.."
	fi
}


fvbe_mount_pacman_cache() {

	if [[ -d /var/cache/pacman-g2 ]]; then
		fvbe_info_msg "Found pacman-g2 cache, mounting.."
		mount -o bind /var/cache/pacman-g2 $FVBE_ROOT/var/cache/pacman-g2
	fi
}

fvbe_umount_pacman_cache() {

	mountpoint -q $FVBE_ROOT/var/cache/pacman-g2 && umount $FVBE_ROOT/var/cache/pacman-g2
}

fvbe_mount() {

	fvbe_info_msg "Mounting the kernel pseudo file-systems.."

	mount -t devtmpfs none $FVBE_ROOT/dev
	mount -t sysfs none $FVBE_ROOT/sys
	mount -t proc none $FVBE_ROOT/proc
	mount -t tmpfs none $FVBE_ROOT/tmp
	mount -t tmpfs none $FVBE_ROOT/var/tmp

	fvbe_mount_pacman_cache
}


fvbe_umount() {

	fvbe_plain_msg "Umounting chroot"

	if [[ -d ${FVBE_ROOT} ]]; then
		umount -lRA ${FVBE_ROOT}
	fi
}

fvbe_chroot() {

	if [[ -d ${FVBE_ROOT} ]]; then
		/usr/sbin/chroot ${FVBE_ROOT} /bin/bash -c "$@"
	else
		fvbe_error_msg "Huh.. FVBE_ROOT does not exist , typo?"
	fi
}

fvbe_create_rootfs_img() {

	fvbe_info_msg "Creating rootfs image.."

	[[ -z ${FVBE_ROOTFS_SIZE} ]] && fvbe_error_msg "${FUNCNAME[0]}() line: ${LINENO} -> FVBE_ROOTFS_SIZE is not set cannot continue.."

	truncate -s "${FVBE_ROOTFS_SIZE}"G rootfs.img >/dev/null 2>&1
	mkfs.ext4 -q -F -m1 rootfs.img
	mkdir -p ${FVBE_ROOT}
	fvbe_plain_msg "Mounting the rootfs.img on ${FVBE_ROOT}"
	mount -o loop rootfs.img ${FVBE_ROOT}
	mkdir -p ${FVBE_ROOT}/{dev,proc,sys,tmp,var/tmp,var/cache/pacman-g2,var/log,etc/sysconfig}
}

fvbe_create_basefs_img() {

	fvbe_info_msg "Creating fixed basefs image.."

	[[ -z ${FVBE_ROOTFS_BASE_SIZE} ]] && fvbe_error_msg "${FUNCNAME[0]}() line: ${LINENO} -> FVBE_ROOTFS_BASE_SIZE is not set cannot continue.."

	truncate -s "${FVBE_ROOTFS_BASE_SIZE}"G basefs.img >/dev/null 2>&1
	mkfs.ext4 -q -F -m1 basefs.img
	mkdir -p ${FVBE_ROOT}
	fvbe_plain_msg "Mounting the basefs.img on ${FVBE_ROOT}"
	mount -o loop basefs.img ${FVBE_ROOT}
	mkdir -p ${FVBE_ROOT}/{dev,proc,sys,tmp,var/tmp,var/cache/pacman-g2,var/log,etc/sysconfig}
}

fvbe_copy_boot_files() {


	## theme ?
	local c="$1"

	if [[ -z ${c} ]]; then
		c="$FVBE_ROOT/boot/grub"
	fi

	## grub /boot stuff
	[[ ! -d ${c} ]] && mkdir -p ${c}

	## hmm figure that
	mkdir -p ${c}/fonts
	cp -f /usr/share/grub/unicode.pf2 ${c}/fonts
	cp -f boot-files/grub.cfg ${c}
	cp -f boot-files/background.png ${c}
}


fvbe_create_users() {

	fvbe_info_msg "Setting up root and guest users.."
	# Setup root user.
	sed -i '/root/d' ${FVBE_ROOT}/etc/shadow
	echo "root:$(openssl passwd -1 fvbe):17014:0:::::" >> ${FVBE_ROOT}/etc/shadow

	# Setup guest user.
	echo "guest:$(openssl passwd -1 fvbe):17014:0:99999:7:::" >> ${FVBE_ROOT}/etc/shadow
	echo "guest:x:1006:100:Guest user:/home/guest:/bin/bash" >> ${FVBE_ROOT}/etc/passwd

	fvbe_plain_msg "Fixing 'guest' users home.."
	cp -ra guest ${FVBE_ROOT}/home/
	mkdir -p ${FVBE_ROOT}/home/guest/.config/autostart
	fvbe_chroot "cp -r /home/guest/Desktop/calamares-frugalware.desktop /home/guest/.config/autostart/calamares-frugalware.desktop"
	fvbe_chroot "/usr/bin/chown -R guest.users /home/guest"
}

fvbe_create_system_files() {

	fvbe_info_msg "Setting up fstab , hostname and machine-info files.."
# System fstab setup.
cat > $FVBE_ROOT/etc/fstab << EOF
none /proc proc defaults 0 0
none /sys sysfs defaults 0 0
none /tmp tmpfs defaults 0 0
none /var/tmp tmpfs defaults 0 0
none /dev/shm tmpfs defaults 0 0
none /dev/pts devpts gid=5,mode=620 0 0
EOF


# System hostname setup.
cat > $FVBE_ROOT/etc/hostname << EOF
$FVBE_ROOTFS_HOSTNAME
EOF

# System pretty hostname setup.
cat > $FVBE_ROOT/etc/machine-info << EOF
PRETTY_HOSTNAME="$FVBE_ROOTFS_PRETTY_HOSTNAME"
EOF

}

fvbe_systemd_files() {

	fvbe_warn_msg "${FUNCNAME[0]}(): Remember to fix that once we remove systemd!"
	ln -sf ${FVBE_ROOT}/lib/systemd/system/graphical.target ${FVBE_ROOT}/etc/systemd/system/default.target
	ln -sf ${FVBE_ROOT}/lib/systemd/system/calamares-locale.service ${FVBE_ROOT}/lib/systemd/system/multi-user.target.wants/calamares-locale.service
}


fvbe_calamares_files() {


	fvbe_info_msg "Setting up calamares files.."
	local cala="$FVBE_ROOT/etc/calamares" cala_files="$FVBE_ROOT/usr/share/calamares/branding/frugalware/" session

	session=plasma.desktop

	[[ ! -d ${cala} ]] && mkdir -p ${cala}
	[[ ! -d ${cala_files} ]] && mkdir -p ${cala_files}

	cp -r calamares/calamares-config-global/* ${cala}
	cp -r calamares/calamares-config-${FVBE_INSTALL_TYPE}/* ${cala}
	cp -r calamares/calamares-frugalware-branding/* ${cala_files}

	## FIXME
	sed -i "s/_version_/$FVBE_ISO_RELEASE/" ${FVBE_ROOT}/usr/share/calamares/branding/frugalware/branding.desc
	sed -i "s/_versionedname_/$(cat $FVBE_ROOT/etc/frugalware-release)/" ${FVBE_ROOT}/usr/share/calamares/branding/frugalware/branding.desc

	if [[ -f "${FVBE_ROOT}/etc/sddm.conf" ]]; then
		fvbe_plain_msg "Setting SDDM Session=$session"
  		sed -i "s|^Session=.*\$|Session=$session|" ${FVBE_ROOT}/etc/sddm.conf
  		sed -i "s|^User=.*\$|User=guest|" ${FVBE_ROOT}/etc/sddm.conf
	else
		fvbe_info_msg "Something is broken here can't find SDDM and is the only supported DM.."
		fvbe_error_msg "Abording.."
	fi


}

fvbe_wipe_files_from_liveiso() {

	fvbe_info_msg "Killing not needed files from LiveISO.."
	## static libs and co
	fvbe_chroot "find usr/lib -name '*.a' | xargs rm -rfv"
	fvbe_chroot "find usr/lib -name '*.la' | xargs rm -rfv"
	fvbe_chroot "find lib -name '*.a' | xargs rm -rfv"
	fvbe_chroot "find lib -name '*.la' | xargs rm -rfv"

	## wipe include
	fvbe_chroot "rm -rf usr/include"
	## wipe docs
	fvbe_chroot "rm -rf usr/share/doc"
	## wipe qt5 stuff
	fvbe_chroot "rm -rf usr/share/qt5/mkspecs"

}

fvbe_cache_files() {

	cp ${FVBE_ROOT}/boot/vmlinuz-* .
	cp ${FVBE_ROOT}/boot/initrd-* .
	cp ${FVBE_ROOT}/usr/share/grub/unicode.pf2 unicode.pf2
	cp ${FVBE_ROOT}/boot/grub/background.png background.png
}

fvbe_copy_chached_files() {

	local ifile vfile

	ifile=$(basename initrd-*)
	vfile=$(basename vmlinuz-*)

	if [[ ! -e ${ifile} ]]; then
		fvbe_error_msg "Missing initrd , abording.."
	fi

	if [[ ! -e ${vfile} ]]; then
		fvbe_error_msg "Missing vmlinuz , abording.."
	fi

	fvbe_info_msg "Setting initrd=$ifile , vmlinuz=$vfile.."
	cp $vfile ${FVBE_ROOT}/boot/vmlinuz
	cp $ifile ${FVBE_ROOT}/boot/initrd
        cp unicode.pf2 ${FVBE_ROOT}/boot/grub/fonts/unicode.pf2
	cp background.png ${FVBE_ROOT}/boot/grub/background.png

}

fvbe_banner() {

	echo ""
	fvbe_info_msg "Building Frugalware-${FVBE_ISO_RELEASE}-Live-${FVBE_INSTALL_TYPE}-installation-x86_64.iso LiveISO.."
	fvbe_info_msg "Repository is set to : ${FVBE_ROOTFS_REPOSITORY}"
	echo ""
}

if [[ -e ./fvbe.conf ]]; then
        source ./fvbe.conf
else
        fvbe_warn_msg "fvbe.conf seems to be missing.."
        fvbe_error_msg "please create one and retry.."
fi

## check for xorriso conf and wrapper here since it would error out
## at the end of the script and that sucks :)
if [[ ! -e ./grub-mkrescue-xorriso.conf ]]; then
	fvbe_error_msg "Missing grub-mkrescue-xorriso.conf, abording..."
fi

if [[ ! -f bin/grub-mkrescue-sed ]]; then
	fvbe_error_msg "Missing bin/grub-mkrescue-sed, abording..."
fi

## we need be root
fvbe_check_root

fvbe_banner

## check progs we need to build the iso
fvbe_check_prog

## repo setup

fvbe_info_msg "Setting up repository(s).."
[[ -z ${FVBE_ROOTFS_REPOSITORY} ]] && fvbe_error_msg "Line: ${LINENO} -> FVBE_ROOTFS_REPOSITORY is not set cannot continue.."
[[ -z ${FVBE_ISO_TYPE} ]] && fvbe_error_msg "Line: ${LINENO} -> FVBE_ISO_TYPE is not set cannot continue.."
[[ -z ${FVBE_INSTALL_TYPE} ]] && fvbe_error_msg "Line: ${LINENO} -> FVBE_INSTALL_TYPE is not set cannot continue.."


if [[ ${FVBE_ROOTFS_REPOSITORY} == "current" ]]; then

	PAC_CONF="pacman-g2.conf"

cat > pacman-g2.conf << EOF
[options]
LogFile = /var/log/pacman-g2.log
[frugalware-current]
Server = http://ftp.frugalware.org/pub/frugalware/frugalware-current/frugalware-x86_64
EOF


elif [[ ${FVBE_ROOTFS_REPOSITORY} == "wip" ]]; then
	if [[ ! -e pacman-g2-wip.conf ]]; then
		fvbe_warning_msg "WIP repo requested but missing pacman-g2-wip.conf"
		fvbe_error_msg "Please create one an retry.."
	else
		fvbe_info_msg "Setting up repo(s) from custom pacman-g2-wip.conf"
		PAC_CONF="pacman-g2-wip.conf"
	fi
else
	fvbe_warning_msg "Unknow repository request!.."
	fvbe_warning_msg "Possble values are 'current' or 'wip'.."
	fvbe_error_msg "...abording!"
fi

declare -a  FVBE_ROOTFS_PACKAGES
declare -a  FVBE_ROOTFS_INSTALL_PACKAGES

case ${FVBE_ISO_TYPE} in
plasma)
	FVBE_ROOTFS_PACKAGES=("${FVBE_ROOTFS_PACKAGES_BASE[@]} ${FVBE_ROOTFS_PACKAGES_BASIC[@]} ${FVBE_ROOTFS_PACKAGES_LIVE_PLASMA[@]}")
	;;
*)
	fvbe_error_msg "Unknow FVBE_ISO_TYPE , typo?"
esac

case ${FVBE_INSTALL_TYPE} in
base)
        FVBE_ROOTFS_INSTALL_PACKAGES=( "${FVBE_ROOTFS_PACKAGES_BASE[@]}" )
        ;;
plasma)
        FVBE_ROOTFS_INSTALL_PACKAGES=("${FVBE_ROOTFS_PACKAGES_BASE[@]} ${FVBE_ROOTFS_PACKAGES_PLASMA[@]}")
        ;;
gnome)
        FVBE_ROOTFS_INSTALL_PACKAGES=("${FVBE_ROOTFS_PACKAGES_BASE[@]}  ${FVBE_ROOTFS_PACKAGES_GNOME[@]}")
        ;;
enlightenment)
        FVBE_ROOTFS_INSTALL_PACKAGES=("${FVBE_ROOTFS_PACKAGES_BASE[@]} ${FVBE_ROOTFS_PACKAGES_E[@]}")
        ;;
*)
        fvbe_error_msg "Unknow FVBE_INSTALL_TYPE , typo?"
esac

## cleanup
## clean files if any and umount everything
rm -rf $FVBE_ROOT vmlinuz vmlinuz-* initrd-* mounts basefs.img rootfs.img locales layouts *.png unicode.pf2 *.fdb LiveOS
fvbe_umount

## step1 mini basefs ( always needed no matter what we install )
fvbe_create_basefs_img

## mount
fvbe_mount

trap fvbe_umount ERR INT TERM 0

## minimal base so we can run chroot with the unpackfs job
## NOTE: grub package is needed to stop stupid job for touching some of our defaults
pacman-g2 --root ${FVBE_ROOT} --noconfirm --noscriptlet --config ${PAC_CONF} -Sy pacman-g2 netkit-base bash grub2

## won't work with cache mounted so we need umount here
fvbe_umount_pacman_cache

## these go to chache now ( maybe we can copy over some way from system ? )
#PAC_CONF="pacman-g2-local.conf" ## for my local setup , do not use  --- crazy ---
pacman-g2 --root ${FVBE_ROOT} --noconfirm --noscriptlet --config ${PAC_CONF} -Syw ${FVBE_ROOTFS_INSTALL_PACKAGES[*]}
#PAC_CONF="pacman-g2.conf"  ## for my local setup , do not use  --- crazy ---
## wipe wipe since we install over anyway
fvbe_wipe_files_from_liveiso
## done with that base+base fpms there
fvbe_umount


## step2 create LIVE stuff
fvbe_create_rootfs_img
fvbe_mount
pacman-g2 --root ${FVBE_ROOT} --noconfirm --noscriptlet --config ${PAC_CONF} -Sy pacman-g2 netkit-base

## copy right conf over
if [[ ${PAC_CONF} == "pacman-g2.conf" ]]; then
	cp pacman-g2.conf $FVBE_ROOT/etc
else
	## well kind fixme..
	cp pacman-g2-wip.conf $FVBE_ROOT/etc/pacman-g2.conf
fi

## get resolv.conf over
cp /etc/resolv.conf ${FVBE_ROOT}/etc
## now install the rest
fvbe_chroot "pacman-g2 --noconfirm -Sy ${FVBE_ROOTFS_PACKAGES[*]}"

## root && guest
fvbe_create_users

## system files
fvbe_create_system_files

## systemd symlinks
fvbe_systemd_files

## cala files including DM setup
fvbe_calamares_files

## copy /boot files over
fvbe_cache_files

## disable lvm stuff we don't really support that
fvbe_chroot "/bin/systemctl disable lvm"

## wipe files from live
fvbe_wipe_files_from_liveiso
## umount

## copy basefs.img over , is use from unpackfs jon so we have:
## - uppackfs -> mini_chrrot + the fpms from cache
## - our-install-packages-module -> chroot $mini_chroot pacman -Sy --noconfirm 'packages'
## so we install from packages not in any way from LIVEISO
mkdir -p ${FVBE_ROOT}/usr/share/images
mv basefs.img ${FVBE_ROOT}/usr/share/images/

fvbe_umount

## cleanup and move rootfs.img over
rm -rf ${FVBE_ROOT:?}/*
mkdir -p ${FVBE_ROOT}/LiveOS
mv rootfs.img  ${FVBE_ROOT}/LiveOS/

fvbe_info_msg "Creating squashfs.img.."
mksquashfs ${FVBE_ROOT} squashfs.img -noappend -no-progress -comp xz -Xbcj x86 -Xdict-size 100%  >/dev/null 2>&1

rm -rf ${FVBE_ROOT} *.iso tmp sums var

fvbe_info_msg "Preparing files for grub-mkrescue and xorriso wrapper.."
mkdir -p ${FVBE_ROOT}/{boot/grub/fonts,LiveOS}

cp squashfs.img ${FVBE_ROOT}/LiveOS/squashfs.img
chmod 444 ${FVBE_ROOT}/LiveOS/squashfs.img

## copy initrd etc over
fvbe_copy_boot_files
fvbe_copy_chached_files

## these are checked else where
source ./grub-mkrescue-xorriso.conf

grub-mkrescue -o Frugalware-${FVBE_ISO_RELEASE}-Live-${FVBE_INSTALL_TYPE}-installation-x86_64.iso ${FVBE_ROOT} -volid FVBE --xorriso=./bin/grub-mkrescue-sed

rm -rf ${FVBE_ROOT} tmp *.img *.png *.png var grub
