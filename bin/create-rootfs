#!/bin/sh

set -e

. ./fvbe.conf

if [ "$(id -u)" -ne 0 ]; then
	echo "You must be root to do this."
	exit 1
fi

if [ "$FVBE_ROOTFS_REPOSITORY" = "current" ]; then
  FDB=frugalware-current.fdb
elif [ "$FVBE_ROOTFS_REPOSITORY" = "stable" ]; then
  FDB=frugalware.fdb
fi

# Cleanup from a previous run.
cp /proc/mounts mounts
while read line; do
	path=$(echo $line | cut -f 2 -d ' ')
	if [ "$path" = "$FVBE_ROOT" ]; then
		continue
	fi
	if [ "$path" != "${path#$FVBE_ROOT}" ]; then
		umount $path
	fi
done < mounts
[ -d "$FVBE_ROOT" ] && umount $FVBE_ROOT
rm -rf $FVBE_ROOT vmlinuz initrd mounts rootfs.img squashfs.img pacman-g2.conf locales layouts unicode.pf2 $FDB

# Create the virtual disk and mount it.
dd if=/dev/zero of=rootfs.img bs=$(( 128 * 1024 )) count=$(( ($FVBE_ROOTFS_SIZE * 1024 * 1024 * 1024) / (128 * 1024) ))
mkfs.ext4 -q -F rootfs.img
mkdir -p $FVBE_ROOT
mount -o loop rootfs.img $FVBE_ROOT

# Create root directory skeleton.
mkdir -p $FVBE_ROOT/{dev,proc,sys,tmp,var/tmp,var/cache/pacman-g2,var/log,etc/sysconfig}
mount -t devtmpfs none $FVBE_ROOT/dev
mount -t sysfs none $FVBE_ROOT/sys
mount -t proc none $FVBE_ROOT/proc
mount -t tmpfs none $FVBE_ROOT/tmp
mount -t tmpfs none $FVBE_ROOT/var/tmp
mount -o bind /var/cache/pacman-g2 $FVBE_ROOT/var/cache/pacman-g2

# Setup pacman-g2.conf.
cat > pacman-g2.conf << EOF
[options]
LogFile = /var/log/pacman-g2.log
[frugalware$(test "$FVBE_ROOTFS_REPOSITORY" = "current" -o "$FVBE_ROOTFS_REPOSITORY" = "testing" && echo -n "-$FVBE_ROOTFS_REPOSITORY")]
Server = http://ftp.frugalware.org/pub/frugalware/frugalware$(test "$FVBE_ROOTFS_REPOSITORY" = "current" -o "$FVBE_ROOTFS_REPOSITORY" = "testing" && echo -n "-$FVBE_ROOTFS_REPOSITORY")/frugalware-$FVBE_ARCH
EOF

# Setup root directory with pacman-g2.
pacman-g2 --root $FVBE_ROOT --noprogressbar --noconfirm --config pacman-g2.conf -Sy $FVBE_ROOTFS_PACKAGES

# LiveCD customizations beyond here.

# Install fwsetup.
install -m 0755 bin/fwsetup $FVBE_ROOT/usr/sbin/fwsetup
install -m 0755 src/fwsetup-valgrind $FVBE_ROOT/usr/sbin/fwsetup-valgrind
install -m 0644 src/fwsetup.supp $FVBE_ROOT/usr/lib/valgrind/fwsetup.supp

# Set the default systemd boot target.
if [ -x "$FVBE_ROOT/usr/bin/X" ]; then
  ln -sf /lib/systemd/system/graphical.target $FVBE_ROOT/etc/systemd/system/default.target
else
  ln -sf /lib/systemd/system/multi-user.target $FVBE_ROOT/etc/systemd/system/default.target
fi

# Install vi symlinks for installer.
ln -sf /usr/bin/vile $FVBE_ROOT/usr/bin/vi
ln -sf /usr/bin/vile $FVBE_ROOT/bin/vi

# Script for setting up the end-user customizations during boot-up.
cat > $FVBE_ROOT/usr/libexec/fvbe-setup << EOF
#!/bin/sh

set -e

echo "FONT=$FVBE_FONT" > /etc/vconsole.conf

for i in \$(cat /proc/cmdline); do
  if [[ "\$i" =~ "locale.LANG=" ]]; then
    localectl set-locale LANG="\${i/locale.LANG=/}"
  elif [[ "\$i" =~ "vconsole.keymap=" ]]; then
    localectl set-keymap "\${i/vconsole.keymap=/}"
  fi
done
EOF
chmod +x $FVBE_ROOT/usr/libexec/fvbe-setup

# Service for launching fvbe-setup.
cat > $FVBE_ROOT/lib/systemd/system/fvbe.service << EOF
[Unit]
Description=FVBE Setup
After=sysinit.target
Before=default.target

[Service]
ExecStart=/usr/libexec/fvbe-setup
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
chroot $FVBE_ROOT sh -c "systemctl enable fvbe.service"

# Disable agetty@tty1.service and setup fwsetup.service.
chroot $FVBE_ROOT sh -c "systemctl disable getty@tty1.service"
cat > $FVBE_ROOT/lib/systemd/system/fwsetup.service << EOF
[Unit]
Description=FVBE Setup Launcher
After=systemd-user-sessions.service plymouth-quit-wait.service
After=rc-local.service
Before=getty.target
IgnoreOnIsolate=yes
ConditionPathExists=/dev/tty0

[Service]
ExecStart=-/usr/sbin/fwsetup
Type=idle
Restart=on-failure
RestartSec=0
StandardInput=tty
StandardOutput=tty
StandardError=tty
TTYPath=/dev/tty1
TTYReset=yes
TTYVHangup=yes
TTYVTDisallocate=yes
IgnoreSIGPIPE=no

[Install]
WantedBy=multi-user.target
EOF
chroot $FVBE_ROOT sh -c "systemctl enable fwsetup.service"

# System fstab setup.
cat > $FVBE_ROOT/etc/fstab << EOF
none /proc proc defaults 0 0
none /sys sysfs defaults 0 0
none /tmp tmpfs defaults 0 0
none /var/tmp tmpfs defaults 0 0
none /dev/shm tmpfs defaults 0 0
none /dev/pts devpts gid=5,mode=620 0 0
none /proc/bus/usb usbfs devgid=23,devmode=664 0 0
EOF

# Setup root user.
chroot $FVBE_ROOT sh -c "echo 'root:fvbe' | chpasswd"

# Setup guest user.
chroot $FVBE_ROOT sh -c "yes '' | adduser guest 'Guest User' fvbe /home/guest"

# System hostname setup.
cat > $FVBE_ROOT/etc/hostname << EOF
$FVBE_ROOTFS_HOSTNAME
EOF

# System pretty hostname setup.
cat > $FVBE_ROOT/etc/machine-info << EOF
PRETTY_HOSTNAME="$FVBE_ROOTFS_PRETTY_HOSTNAME"
EOF

# System issue setup.
for i in $FVBE_ROOT/etc/issue{,.net}; do
  sed -i 's|Frugalware|Frugalware Versatile Bootable Environment|' $i
  cat >> $i << EOF
Username: root guest
Password: fvbe fvbe

EOF
done

# Cache files or data from the ROOTFS that we'll use in the ISO.
cp $FVBE_ROOT/boot/vmlinuz vmlinuz
cp $FVBE_ROOT/boot/initrd initrd
cp $FVBE_ROOT/var/lib/pacman-g2/$FDB $FDB
chroot $FVBE_ROOT sh -c "locale --all-locales | grep '\\.utf8$' | sort --unique" > locales
tail -n +3 $FVBE_ROOT/usr/share/systemd/kbd-model-map | cut -f 1 | sort --unique > layouts
cp $FVBE_ROOT/usr/share/grub/unicode.pf2 unicode.pf2

# Prune unimportant paths.
if [ "$FVBE_ROOTFS_CLEAN" = "yes" ]; then
  rm -rf $FVBE_ROOT/boot/*
  find $FVBE_ROOT -xdev -name '*.[ah]' -delete
fi

# Unmount all paths mounted earlier.
cp /proc/mounts mounts
while read line; do
	path=$(echo $line | cut -f 2 -d ' ')
	if [ "$path" = "$FVBE_ROOT" ]; then
		continue
	fi
	if [ "$path" != "${path#$FVBE_ROOT}" ]; then
		umount $path
	fi
done < mounts
umount $FVBE_ROOT

# Now shrink the rootfs.img to minimum size.
e2fsck -f -a rootfs.img
resize2fs -M rootfs.img
e2fsck -f -a rootfs.img

# Now prepare the squashfs.
mkdir -p $FVBE_ROOT/LiveOS
mv rootfs.img $FVBE_ROOT/LiveOS/rootfs.img
mksquashfs $FVBE_ROOT squashfs.img -noappend -no-progress -comp $FVBE_ROOTFS_COMPRESS

# Clean up leftovers.
rm -rf mounts $FVBE_ROOT
