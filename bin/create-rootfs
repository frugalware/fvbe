#!/bin/sh

set -e

. ./fvbe.conf

if [ ! -e /usr/bin/re2c ]; then
	echo "re2c is missing"
	exit 1
fi

if [ ! -e /usr/bin/mksquashfs ]; then
	echo "mksquashfs is missing"
	exit 1
fi

if [ ! -e /usr/bin/xorriso ]; then
	echo "xorriso is missing"
	exit 1
fi


if [ "$FVBE_ROOTFS_REPOSITORY" = "current" ]; then
  FDB=frugalware-current.fdb
  MIRROR="http://ftp.frugalware.org/pub/frugalware/frugalware-current/frugalware-$FVBE_ARCH"
elif [ "$FVBE_ROOTFS_REPOSITORY" = "stable" ]; then
  FDB=frugalware.fdb
  MIRROR="http://ftp.frugalware.org/pub/frugalware/frugalware-$FVBE_ISO_RELEASE/frugalware-$FVBE_ARCH"
fi
REPO=${FDB/.fdb/}

# Cleanup from a previous run.
rm -rf $FVBE_ROOT vmlinuz initrd mounts rootfs.img pacman-g2.conf locales layouts unicode.pf2 $FDB LiveOS

# Create root directory skeleton.
mkdir -p $FVBE_ROOT/{dev,proc,sys,tmp,var/tmp,var/cache/pacman-g2,var/log,etc/sysconfig}

# Setup pacman-g2.conf.
cat > pacman-g2.conf << EOF
[options]
LogFile = /var/log/pacman-g2.log
[$REPO]
Server = $MIRROR
EOF

# Setup root directory with pacman-g2.
fakeroot -u pacman-g2 --root $FVBE_ROOT --noconfirm --noscriptlet --config pacman-g2.conf -Sy $FVBE_ROOTFS_PACKAGES

# LiveCD customizations beyond here.

# Install fwsetup.
install -m 0755 bin/fwsetup $FVBE_ROOT/usr/sbin/fwsetup
           
# Set the default systemd boot target.
if [ -x "$FVBE_ROOT/usr/bin/X" ]; then
  ln -sf /lib/systemd/system/graphical.target $FVBE_ROOT/etc/systemd/system/default.target
else
  ln -sf /lib/systemd/system/multi-user.target $FVBE_ROOT/etc/systemd/system/default.target
fi

# Install vi symlinks for installer.
ln -sf $FVBE_ROOT/usr/bin/vim $FVBE_ROOT/usr/bin/vi
ln -sf $FVBE_ROOT/usr/bin/vim $FVBE_ROOT/bin/vi

# Script for setting up the end-user customizations during boot-up.
cat > $FVBE_ROOT/usr/libexec/fvbe-setup << EOF
#!/bin/sh

set -e

echo "FONT=$FVBE_FONT" > /etc/vconsole.conf

for i in \$(cat /proc/cmdline); do
  if [[ "\$i" =~ "locale.LANG=" ]]; then
    localectl set-locale LANG="\${i/locale.LANG=/}"
  elif [[ "\$i" =~ "vconsole.keymap=" ]]; then
    localectl set-keymap "\${i/vconsole.keymap=/}"
  fi
done
EOF
chmod +x $FVBE_ROOT/usr/libexec/fvbe-setup

# Service for launching fvbe-setup.
cat > $FVBE_ROOT/lib/systemd/system/fvbe.service << EOF
[Unit]
Description=FVBE Setup
After=sysinit.target
Before=default.target

[Service]
ExecStart=/usr/libexec/fvbe-setup
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
ln -s $FVBE_ROOT/lib/systemd/system/fvbe.service $FVBE_ROOT/lib/systemd/system/multi-user.target.wants/fvbe.service

cat > $FVBE_ROOT/lib/systemd/system/fwsetup.service << EOF
[Unit]
Description=FVBE Setup Launcher
After=systemd-user-sessions.service
After=rc-local.service
Before=getty.target
IgnoreOnIsolate=yes
ConditionPathExists=/dev/tty0

[Service]
ExecStart=-/usr/sbin/fwsetup
Type=idle
Restart=on-failure
RestartSec=0
StandardInput=tty
StandardOutput=tty
StandardError=tty
TTYPath=/dev/tty1
TTYReset=yes
TTYVHangup=yes
TTYVTDisallocate=yes
IgnoreSIGPIPE=no

[Install]
WantedBy=multi-user.target
EOF
ln -s $FVBE_ROOT/lib/systemd/system/fwsetup.service $FVBE_ROOT/lib/systemd/system/multi-user.target.wants/fwsetup.service

# System fstab setup.
cat > $FVBE_ROOT/etc/fstab << EOF
none /proc proc defaults 0 0
none /sys sysfs defaults 0 0
none /tmp tmpfs defaults 0 0
none /var/tmp tmpfs defaults 0 0
none /dev/shm tmpfs defaults 0 0
none /dev/pts devpts gid=5,mode=620 0 0
EOF

# Setup root user.
sed -i '/root/d' $FVBE_ROOT/etc/shadow
echo "root:$(openssl passwd -1 fvbe):17014:0:::::" >> $FVBE_ROOT/etc/shadow

# Setup guest user.
echo "guest:$(openssl passwd -1 fvbe):17014:0:99999:7:::" >> $FVBE_ROOT/etc/shadow
echo "guest:x:1006:100:Guest user:/home/guest:/bin/bash" >> $FVBE_ROOT/etc/passwd

# System hostname setup.
cat > $FVBE_ROOT/etc/hostname << EOF
$FVBE_ROOTFS_HOSTNAME
EOF

# System pretty hostname setup.
cat > $FVBE_ROOT/etc/machine-info << EOF
PRETTY_HOSTNAME="$FVBE_ROOTFS_PRETTY_HOSTNAME"
EOF

# System issue setup.
for i in $FVBE_ROOT/etc/issue{,.net}; do
  sed -i 's|Frugalware|Frugalware Versatile Bootable Environment|' $i
  cat >> $i << EOF
Username: root guest
Password: fvbe fvbe

EOF
done

# Enable gpm at boot
ln -s $FVBE_ROOT/lib/systemd/system/gpm.service  $FVBE_ROOT/lib/systemd/system/multi-user.target.wants/gpm.service

# Cache files or data from the ROOTFS that we'll use in the ISO.
cp $FVBE_ROOT/boot/vmlinuz vmlinuz
cp $FVBE_ROOT/boot/initrd initrd
cp $FVBE_ROOT/var/lib/pacman-g2/$FDB .

localedef -f $FVBE_ROOT/usr/lib/locale/locale-archive --list-archive | grep '\\.utf8$' | sort --unique > locales

tail -n +3 $FVBE_ROOT/usr/share/systemd/kbd-model-map | cut -f 1 | sort --unique > layouts
cp $FVBE_ROOT/usr/share/grub/unicode.pf2 unicode.pf2

# Prune unimportant paths.
if [ "$FVBE_ROOTFS_CLEAN" = "yes" ]; then
  rm -rf $FVBE_ROOT/usr/share/doc
  rm -rf $FVBE_ROOT/boot/{initrd*,vmlinuz*}
  rm -rf $FVBE_ROOT/usr/include
  rm -rf $FVBE_ROOT/usr/share/gtk-doc
  
  find $FVBE_ROOT -xdev -name '*.[ah]' -delete
  find $FVBE_ROOT -xdev -name '*.la' -delete
fi

# Move grub background out of rootfs
mv $FVBE_ROOT/boot/grub/background.png .

# Remove downloaded packages
rm -rf $FVBE_ROOT/var/cache/pacman-g2/pkg/

# Now prepare the rootfs.
e2fsimage -f rootfs.img -d $FVBE_ROOT -t ext4 -S -s $(( $FVBE_ROOTFS_SIZE * 1024 * 1024  ))

# Now shrink the rootfs.img to minimum size.
/sbin/resize2fs -M rootfs.img

rm -rf $FVBE_ROOT/*
mkdir $FVBE_ROOT/LiveOS
mv rootfs.img  $FVBE_ROOT/LiveOS/

mksquashfs $FVBE_ROOT squashfs.img -noappend -no-progress -all-root -comp $FVBE_ROOTFS_COMPRESS -Xbcj x86 -always-use-fragments


